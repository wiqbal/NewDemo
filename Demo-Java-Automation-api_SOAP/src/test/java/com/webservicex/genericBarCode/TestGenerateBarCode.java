package com.webservicex.genericBarCode;

import org.testng.annotations.Test;

import com.orasi.utils.Randomness;
import com.orasi.utils.Sleeper;
import com.orasi.utils.TestEnvironment;
import com.orasi.utils.TestReporter;
import com.webservicex.genericBarCode.operations.GenerateBarCode;

public class TestGenerateBarCode extends TestEnvironment {
	@Test
	public void makeBarGenericBarCode() {
		GenerateBarCode generate = new GenerateBarCode();
		int tries = 0;
		int maxTries = 10;
		boolean success = false;
		do {
			Sleeper.sleep(1000);
			try {
				generate.sendRequest();
				if (generate.getResponseStatusCode().equals("200")) {
					success = true;
				}
			} catch (Exception e) {

			}
			tries++;
		} while (tries < maxTries && !success);
		TestReporter.logAPI(generate.getBarCodeBytes() != "", "Generated byte string for barcode", generate);
		generate.generateBarCodeImage();
	}

	@Test
	public void makeBarCode_FontSize() {
		GenerateBarCode generate = new GenerateBarCode();
		generate.setFontSize("14");
		int tries = 0;
		int maxTries = 10;
		boolean success = false;
		do {
			Sleeper.sleep(1000);
			try {
				generate.sendRequest();
				if (generate.getResponseStatusCode().equals("200")) {
					success = true;
				}
			} catch (Exception e) {

			}
			tries++;
		} while (tries < maxTries && !success);
		TestReporter.logAPI(generate.getBarCodeBytes() != "", "Generated byte string for barcode", generate);
		generate.generateBarCodeImage();
	}

	@Test
	public void makeBarCode_DisplayText() {
		GenerateBarCode generate = new GenerateBarCode();
		generate.setBarCodeText(Randomness.randomNumber(12));
		int tries = 0;
		int maxTries = 10;
		boolean success = false;
		do {
			Sleeper.sleep(1000);
			try {
				generate.sendRequest();
				if (generate.getResponseStatusCode().equals("200")) {
					success = true;
				}
			} catch (Exception e) {

			}
			tries++;
		} while (tries < maxTries && !success);
		TestReporter.logAPI(generate.getBarCodeBytes() != "", "Generated byte string for barcode", generate);
		generate.generateBarCodeImage();
	}

	@Test
	public void makeBarCode_DisplayPosition() {
		GenerateBarCode generate = new GenerateBarCode();
		generate.setShowTextPosition("TopCenter");
		int tries = 0;
		int maxTries = 10;
		boolean success = false;
		do {
			Sleeper.sleep(1000);
			try {
				generate.sendRequest();
				if (generate.getResponseStatusCode().equals("200")) {
					success = true;
				}
			} catch (Exception e) {

			}
			tries++;
		} while (tries < maxTries && !success);
		TestReporter.logAPI(generate.getBarCodeBytes() != "", "Generated byte string for barcode", generate);
		generate.generateBarCodeImage();
	}
}
